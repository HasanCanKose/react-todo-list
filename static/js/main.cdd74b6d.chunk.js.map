{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","App","event","setState","target","preventDefault","newItem","state","updatedItems","uuidv4","alert","filteredItems","filter","selectedItem","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdd74b6d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TodoInput extends Component {\r\n  render() {\r\n    const { item, handleChange, handleSubmit, editItem } = this.props;\r\n    return (\r\n      <div className=\"input\">\r\n        <h1 className=\"text\">Todo Input</h1>\r\n        <form className=\"input-form\" onSubmit={handleSubmit}>\r\n          <input\r\n            className=\"input-text\"\r\n            type=\"text\"\r\n            placeholder=\"Add a todo item\"\r\n            value={item}\r\n            onChange={handleChange}\r\n          />\r\n          <button\r\n            className={editItem ? \"input-button-edit\" : \"input-button\"}\r\n            type=\"submit\"\r\n          >\r\n            {editItem ? \"Edit Item\" : \"Add Item\"}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoInput;\r\n","import React, { Component } from \"react\";\r\n\r\nclass TodoItem extends Component {\r\n  render() {\r\n    const { title, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <li className=\"item\">\r\n        <div className=\"title\">\r\n          <h6 className=\"item-text\">{title}</h6>\r\n        </div>\r\n        <div className=\"todo-icon\">\r\n          <span className=\"edit\" onClick={handleEdit}>\r\n            <i className=\"fas fa-pen\" />\r\n          </span>\r\n          <span className=\"delete\" onClick={handleDelete}>\r\n            <i className=\"fas fa-trash\"></i>\r\n          </span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass TodoList extends Component {\r\n  render() {\r\n    const { items, clearList, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <div className=\"list\">\r\n        <h1 className=\"text\">Todo List</h1>\r\n        <ul className=\"list-ul\">\r\n          {items.map(item => {\r\n            return (\r\n              <TodoItem\r\n                key={item.id}\r\n                title={item.title}\r\n                handleDelete={() => handleDelete(item.id)}\r\n                handleEdit={() => handleEdit(item.id)}\r\n              />\r\n            );\r\n          })}\r\n          <button className=\"list-button\" type=\"button\" onClick={clearList}>\r\n            Clear List\r\n          </button>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      id: uuidv4(),\n      item: \"\",\n      editItem: false\n    };\n  }\n\n  handleChange = event => {\n    this.setState({\n      item: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    };\n    const updatedItems = [...this.state.items, newItem];\n    if (this.state.item !== \"\") {\n      this.setState({\n        items: updatedItems,\n        item: \"\",\n        id: uuidv4(),\n        editItem: false\n      });\n    } else {\n      alert(\"The input bar is empty!\");\n    }\n  };\n\n  clearList = () => {\n    this.setState({\n      items: []\n    });\n  };\n\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n\n    this.setState({\n      items: filteredItems\n    });\n  };\n\n  handleEdit = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n\n    const selectedItem = this.state.items.find(item => item.id === id);\n\n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoInput\n          item={this.state.item}\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          editItem={this.state.editItem}\n        />\n        <TodoList\n          items={this.state.items}\n          clearList={this.clearList}\n          handleDelete={this.handleDelete}\n          handleEdit={this.handleEdit}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}